.TH "tmx::Tileset" 3 "Tue Dec 31 2019" "Version 1.0.0" "tmxlite" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tmx::Tileset \- Represents a \fBTileset\fP node as loaded from a *\&.tmx format tile map via the \fBtmx::Map\fP class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Tileset\&.hpp>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBTerrain\fP"
.br
.RI "\fBTerrain\fP information with which one or more tiles may be associated\&. "
.ti -1c
.RI "struct \fBTile\fP"
.br
.RI "Any tiles within a tile set which have special data associated with them such as animation or terrain information will have one of these stored in the tile set\&. "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTileset\fP (const std::string &workingDir)"
.br
.ti -1c
.RI "void \fBparse\fP (pugi::xml_node)"
.br
.RI "Attempts to parse the given xml node\&. If node parsing fails an error is printed in the console and the \fBTileset\fP remains in an uninitialised state\&. "
.ti -1c
.RI "std::uint32_t \fBgetFirstGID\fP () const"
.br
.RI "Returns the first GID of this tile set\&. This the ID of the first tile in the tile set, so that each tile set guarantees a unique set of IDs\&. "
.ti -1c
.RI "std::uint32_t \fBgetLastGID\fP () const"
.br
.RI "Returns the last GID of this tile set\&. This is the ID of the last tile in the tile set\&. "
.ti -1c
.RI "const std::string & \fBgetName\fP () const"
.br
.RI "Returns the name of this tile set\&. "
.ti -1c
.RI "const \fBVector2u\fP & \fBgetTileSize\fP () const"
.br
.RI "Returns the width and height of a tile in the tile set, in pixels\&. "
.ti -1c
.RI "std::uint32_t \fBgetSpacing\fP () const"
.br
.RI "Returns the spacing, in pixels, between each tile in the set\&. "
.ti -1c
.RI "std::uint32_t \fBgetMargin\fP () const"
.br
.RI "Returns the margin, in pixels, around each tile in the set\&. "
.ti -1c
.RI "std::uint32_t \fBgetTileCount\fP () const"
.br
.RI "Returns the number of tiles in the tile set\&. "
.ti -1c
.RI "std::uint32_t \fBgetColumnCount\fP () const"
.br
.RI "Returns the number of columns which make up the tile set\&. This is used when rendering collection of images sets\&. "
.ti -1c
.RI "const \fBVector2u\fP & \fBgetTileOffset\fP () const"
.br
.RI "Returns the tile offset in pixels\&. \fBTile\fP will draw tiles offset from the top left using this value\&. "
.ti -1c
.RI "const std::vector< \fBProperty\fP > & \fBgetProperties\fP () const"
.br
.RI "Returns a reference to the list of \fBProperty\fP objects for this tile set\&. "
.ti -1c
.RI "const std::string \fBgetImagePath\fP () const"
.br
.RI "Returns the file path to the tile set image, relative to the working directory\&. Use this to load the texture required by whichever method you choose to render the map\&. "
.ti -1c
.RI "const \fBColour\fP & \fBgetTransparencyColour\fP () const"
.br
.RI "Returns the colour used by the tile map image to represent transparency\&. By default this is a transparent colour (0, 0, 0, 0) "
.ti -1c
.RI "bool \fBhasTransparency\fP () const"
.br
.RI "Returns true if the image used by this tileset specifically requests a colour to use as transparency\&. "
.ti -1c
.RI "const std::vector< \fBTerrain\fP > & \fBgetTerrainTypes\fP () const"
.br
.RI "Returns a vector of \fBTerrain\fP types associated with one or more tiles within this tile set\&. "
.ti -1c
.RI "const std::vector< \fBTile\fP > & \fBgetTiles\fP () const"
.br
.RI "Returns a reference to the vector of tile data used by tiles which make up this tile set\&. "
.ti -1c
.RI "bool \fBhasTile\fP (std::uint32_t id) const"
.br
.RI "Checks if a tiled ID is in the range of the first ID and the last ID\&. "
.ti -1c
.RI "const \fBTile\fP * \fBgetTile\fP (std::uint32_t id) const"
.br
.RI "queries tiles and returns a tile with the given ID\&. Checks if the TileID is part of the \fBTileset\fP with \fChasTile(a_id)\fP "
.in -1c
.SH "Detailed Description"
.PP 
Represents a \fBTileset\fP node as loaded from a *\&.tmx format tile map via the \fBtmx::Map\fP class\&. 
.SH "Member Function Documentation"
.PP 
.SS "const \fBTile\fP* tmx::Tileset::getTile (std::uint32_t id) const"

.PP
queries tiles and returns a tile with the given ID\&. Checks if the TileID is part of the \fBTileset\fP with \fChasTile(a_id)\fP 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP \fBTile\fP ID\&. The \fBTile\fP ID will be corrected internally\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
In case of a success it returns the correct tile\&. In terms of failure it will return a nullptr\&. 
.RE
.PP

.SS "bool tmx::Tileset::hasTile (std::uint32_t id) const\fC [inline]\fP"

.PP
Checks if a tiled ID is in the range of the first ID and the last ID\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP \fBTile\fP ID 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for tmxlite from the source code\&.
