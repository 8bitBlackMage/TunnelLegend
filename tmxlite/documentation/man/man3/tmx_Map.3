.TH "tmx::Map" 3 "Tue Dec 31 2019" "Version 1.0.0" "tmxlite" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tmx::Map \- Parser for TMX format tile maps\&. This class can be used to parse the XML format tile maps created with the Tiled map editor, providing an interface to create drawable and physics objects\&. Typical usage would be to create an instance of this class before calling \fBload()\fP providing a path to the *\&.tmx file to be loaded\&. Then layers or objects can be requested from the \fBMap\fP class to be interpreted as needed\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Map\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMap\fP (const \fBMap\fP &)=delete"
.br
.ti -1c
.RI "\fBMap\fP & \fBoperator=\fP (const \fBMap\fP &)=delete"
.br
.ti -1c
.RI "\fBMap\fP (\fBMap\fP &&)=default"
.br
.ti -1c
.RI "\fBMap\fP & \fBoperator=\fP (\fBMap\fP &&)=default"
.br
.ti -1c
.RI "bool \fBload\fP (const std::string &)"
.br
.RI "Attempts to parse the tilemap at the given location\&. "
.ti -1c
.RI "const \fBVersion\fP & \fBgetVersion\fP () const"
.br
.RI "Returns the version of the tile map last parsed\&. If no tile map has yet been parsed the version will read 0, 0\&. "
.ti -1c
.RI "Orientation \fBgetOrientation\fP () const"
.br
.RI "Returns the orientation of the map if one is loaded, else returns None\&. "
.ti -1c
.RI "RenderOrder \fBgetRenderOrder\fP () const"
.br
.RI "Returns the RenderOrder of the map if one is loaded, else returns None\&. "
.ti -1c
.RI "const \fBVector2u\fP & \fBgetTileCount\fP () const"
.br
.RI "Returns the tile count of the map in the X and Y directions\&. "
.ti -1c
.RI "const \fBVector2u\fP & \fBgetTileSize\fP () const"
.br
.RI "Returns the size of the tile grid in this map\&. Actual tile sizes may vary and will be extended / shrunk about the bottom left corner of the tile\&. "
.ti -1c
.RI "\fBFloatRect\fP \fBgetBounds\fP () const"
.br
.RI "Returns the bounds of the map\&. "
.ti -1c
.RI "float \fBgetHexSideLength\fP () const"
.br
.RI "Returns the length of an edge of a tile if a Hexagonal map is loaded\&. The length returned is in pixels of the straight edge running along the axis returned by \fBgetStaggerAxis()\fP\&. If no map is loaded or the loaded map is not of Hexagonal orientation this function returns 0\&.f\&. "
.ti -1c
.RI "StaggerAxis \fBgetStaggerAxis\fP () const"
.br
.RI "Stagger axis of the map\&. If either a Staggered or Hexagonal tile map is loaded this returns which axis the map is staggered along, else returns None\&. "
.ti -1c
.RI "StaggerIndex \fBgetStaggerIndex\fP () const"
.br
.RI "Stagger Index of the loaded map\&. If a Staggered or Hexagonal map is loaded this returns whether the even or odd rows of tiles are staggered, otherwise it returns None\&. "
.ti -1c
.RI "const \fBColour\fP & \fBgetBackgroundColour\fP () const"
.br
.RI "Returns the background colour of the map\&. "
.ti -1c
.RI "const std::vector< \fBTileset\fP > & \fBgetTilesets\fP () const"
.br
.RI "Returns a reference to the vector of tile sets used by the map\&. "
.ti -1c
.RI "const std::vector< Layer::Ptr > & \fBgetLayers\fP () const"
.br
.RI "Returns a reference to the vector containing the layer data\&. Layers are pointer-to-baseclass, the concrete type of which can be found via \fBLayer::getType()\fP "
.ti -1c
.RI "const std::vector< \fBProperty\fP > & \fBgetProperties\fP () const"
.br
.RI "Returns a vector of \fBProperty\fP objects loaded by the map\&. "
.ti -1c
.RI "const std::map< std::uint32_t, \fBTileset::Tile\fP > & \fBgetAnimatedTiles\fP () const"
.br
.RI "Returns a Hashmap of all animated tiles accessible by TileID\&. "
.in -1c
.SH "Detailed Description"
.PP 
Parser for TMX format tile maps\&. This class can be used to parse the XML format tile maps created with the Tiled map editor, providing an interface to create drawable and physics objects\&. Typical usage would be to create an instance of this class before calling \fBload()\fP providing a path to the *\&.tmx file to be loaded\&. Then layers or objects can be requested from the \fBMap\fP class to be interpreted as needed\&. 
.SH "Member Function Documentation"
.PP 
.SS "const std::vector<Layer::Ptr>& tmx::Map::getLayers () const\fC [inline]\fP"

.PP
Returns a reference to the vector containing the layer data\&. Layers are pointer-to-baseclass, the concrete type of which can be found via \fBLayer::getType()\fP 
.PP
\fBSee also:\fP
.RS 4
\fBLayer\fP 
.RE
.PP

.SS "bool tmx::Map::load (const std::string &)"

.PP
Attempts to parse the tilemap at the given location\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstd::string\fP Path to map file to try to parse 
.RE
.PP
\fBReturns:\fP
.RS 4
true if map was parsed successfully else returns false\&. In debug mode this will attempt to log any errors to the console\&. 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for tmxlite from the source code\&.
